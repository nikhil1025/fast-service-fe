"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   api: function() { return /* binding */ api; },\n/* harmony export */   auth: function() { return /* binding */ auth; }\n/* harmony export */ });\nconst API_BASE_URL = \"http://localhost:3001/test/api\" || 0;\n// API Client Class\nclass ApiClient {\n    setToken(token) {\n        this.token = token;\n        if (true) {\n            localStorage.setItem(\"auth_token\", token);\n        }\n    }\n    removeToken() {\n        this.token = null;\n        if (true) {\n            localStorage.removeItem(\"auth_token\");\n        }\n    }\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(this.baseURL).concat(endpoint);\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            ...options.headers\n        };\n        if (this.token) {\n            headers.Authorization = \"Bearer \".concat(this.token);\n        }\n        const response = await fetch(url, {\n            ...options,\n            headers\n        });\n        if (!response.ok) {\n            const error = await response.json().catch(()=>({\n                    message: \"An error occurred\"\n                }));\n            throw new Error(error.message || \"HTTP \".concat(response.status));\n        }\n        return response.json();\n    }\n    // Auth endpoints\n    async register(data) {\n        return this.request(\"/auth/register\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async login(data) {\n        return this.request(\"/auth/login\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async getProfile() {\n        return this.request(\"/auth/profile\", {\n            method: \"POST\"\n        });\n    }\n    // Users endpoints\n    async getUsers() {\n        return this.request(\"/users\");\n    }\n    async updateUser(id, data) {\n        return this.request(\"/users/\".concat(id), {\n            method: \"PATCH\",\n            body: JSON.stringify(data)\n        });\n    }\n    async deleteUser(id) {\n        return this.request(\"/users/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    // Categories endpoints\n    async getCategories() {\n        return this.request(\"/categories\");\n    }\n    async getCategoriesHierarchy() {\n        return this.request(\"/categories/hierarchy\");\n    }\n    async getCategoryBySlug(slug) {\n        return this.request(\"/categories/slug/\".concat(slug));\n    }\n    async createCategory(data) {\n        return this.request(\"/categories\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async updateCategory(id, data) {\n        return this.request(\"/categories/\".concat(id), {\n            method: \"PATCH\",\n            body: JSON.stringify(data)\n        });\n    }\n    async deleteCategory(id) {\n        return this.request(\"/categories/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    async seedCategories() {\n        return this.request(\"/categories/seed\");\n    }\n    // Services endpoints\n    async getServices(categoryId) {\n        const params = categoryId ? \"?categoryId=\".concat(categoryId) : \"\";\n        return this.request(\"/services\".concat(params));\n    }\n    async getFeaturedServices() {\n        return this.request(\"/services/featured\");\n    }\n    async getPopularServices() {\n        return this.request(\"/services/popular\");\n    }\n    async getServicesByCategory(slug) {\n        return this.request(\"/services/category/\".concat(slug));\n    }\n    async getService(id) {\n        return this.request(\"/services/\".concat(id));\n    }\n    async createService(data) {\n        return this.request(\"/services\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async updateService(id, data) {\n        return this.request(\"/services/\".concat(id), {\n            method: \"PATCH\",\n            body: JSON.stringify(data)\n        });\n    }\n    async deleteService(id) {\n        return this.request(\"/services/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    async seedServices() {\n        return this.request(\"/services/seed\");\n    }\n    // Bookings endpoints\n    async createBooking(data) {\n        return this.request(\"/bookings\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async getBookings() {\n        return this.request(\"/bookings\");\n    }\n    async getAllBookings() {\n        return this.request(\"/bookings?all=true\");\n    }\n    async getBooking(id) {\n        return this.request(\"/bookings/\".concat(id));\n    }\n    async updateBookingStatus(id, status) {\n        return this.request(\"/bookings/\".concat(id, \"/status\"), {\n            method: \"PATCH\",\n            body: JSON.stringify({\n                status\n            })\n        });\n    }\n    async deleteBooking(id) {\n        return this.request(\"/bookings/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    // Reviews endpoints\n    async getReviews(serviceId) {\n        const params = serviceId ? \"?serviceId=\".concat(serviceId) : \"\";\n        return this.request(\"/reviews\".concat(params));\n    }\n    async deleteReview(id) {\n        return this.request(\"/reviews/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    // Contact endpoints\n    async createContact(data) {\n        return this.request(\"/contact\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async getContacts() {\n        return this.request(\"/contact\");\n    }\n    async markContactAsRead(id) {\n        return this.request(\"/contact/\".concat(id, \"/read\"), {\n            method: \"PATCH\"\n        });\n    }\n    async deleteContact(id) {\n        return this.request(\"/contact/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    // Dashboard endpoints\n    async getDashboardStats() {\n        return this.request(\"/dashboard/stats\");\n    }\n    async getDashboardActivity() {\n        return this.request(\"/dashboard/activity\");\n    }\n    // Search endpoints\n    async search(params) {\n        const searchParams = new URLSearchParams();\n        Object.entries(params).forEach((param)=>{\n            let [key, value] = param;\n            if (value !== undefined && value !== null) {\n                searchParams.append(key, value.toString());\n            }\n        });\n        return this.request(\"/search?\".concat(searchParams.toString()));\n    }\n    async getSearchFilters() {\n        return this.request(\"/search/filters\");\n    }\n    async getSearchSuggestions(query) {\n        return this.request(\"/search/suggestions?q=\".concat(encodeURIComponent(query)));\n    }\n    async getPopularSearches() {\n        return this.request(\"/search/popular\");\n    }\n    constructor(baseURL){\n        this.token = null;\n        this.baseURL = baseURL;\n        // Get token from localStorage if available\n        if (true) {\n            this.token = localStorage.getItem(\"auth_token\");\n        }\n    }\n}\n// Create and export API client instance\nconst api = new ApiClient(API_BASE_URL);\n// Auth utilities\nconst auth = {\n    login: async (email, password)=>{\n        const response = await api.login({\n            email,\n            password\n        });\n        api.setToken(response.access_token);\n        return response;\n    },\n    register: async (data)=>{\n        const response = await api.register(data);\n        api.setToken(response.access_token);\n        return response;\n    },\n    logout: ()=>{\n        api.removeToken();\n    },\n    getToken: ()=>{\n        if (true) {\n            return localStorage.getItem(\"auth_token\");\n        }\n        return null;\n    },\n    isAuthenticated: ()=>{\n        return !!auth.getToken();\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});